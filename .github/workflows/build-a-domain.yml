name: 'Build a domain'

on:
  workflow_call:
    inputs:
      releaseconfig:
          description: 'The path to the release config file'
          type: 'string'
      pathToReleaseConfigs:
          description: 'The path to the directory that has all release config'
          type: 'string'
      domain:
          description: 'The name of the domain to be built'
          type: 'string'
      branchname:
          description: 'The name of the branch where the build is triggrered'
          type: 'string' 
      additional-plugins:
         description: 'Additional plugins to be installed'
         type: 'string'
      dashboard-repo:
         description: 'The repo to which the package version report is to be committed'
         type: 'string'
      releasename:
         description: 'The name of the release'
         type: 'string'
      metrics-provider:
            description: 'The metrics provider to be used'
            type: 'string'
      workitem-url:
          description: 'The url of the workitem'
          type: 'string'
      workitem-filter:
          description: 'The filter to be applied to the workitem'
          type: 'string'  
    secrets: 
        DEVHUB_SFDX_AUTH_URL:
            description: 'Devhub Auth URL'
        SB_SFDX_AUTH_URL:
            description: 'Sandbox Auth URL'
        gh_token:
            description: 'GH Token to commit to the target repo'
        datadog-api-key:
            description: 'Datadog api key to report metrics'
        datadog-host:
            description: 'Datadog host to report metrics'

jobs: 

  
  fetch-test-envs:
    name: Fetch Test Environments
    runs-on: ubuntu-latest
    outputs:
      allEnvsAsJSON: ${{ steps.fetchAllEnvs.outputs.allEnvsAsJSON }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: flxbl-io/sfops-gh-actions/fetchAllEnvs@main
        id: fetchAllEnvs
        with:
          gh_token: ${{ secrets.gh_token }}
          filter: "type:test,branch:${{ inputs.branchname }}"

  build:
    name: 'Build packages'
    runs-on: ubuntu-latest
    container: ghcr.io/dxatscale/sfpowerscripts-rc:alpha
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Export Datadog Environment Variables
        if: ${{ inputs.metrics-provider == 'datadog'}}
        run: |
          echo "SFPOWERSCRIPTS_DATADOG=true" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_HOST=${{ secrets.datadog-host }}" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_API_KEY=${{ secrets.datadog-api-key }}" >> $GITHUB_ENV

          
      - name: 'Authenticate Dev Hub'
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
          sfdx auth:sfdxurl:store -f authfile -a devhub

      - name: 'Create packages'
        id: sfpowerscripts-build
        run: |
          sfpowerscripts orchestrator:build -v devhub --diffcheck --branch  ${{ inputs.branchname }} --buildnumber ${GITHUB_RUN_ID} --releaseconfig=${{inputs.releaseconfig}}

      - name: 'Report  Package Info'
        uses: flxbl-io/sfops-gh-actions/packageInfoReporter@main  
        with:
         pathToReleaseConfigs: ${{ inputs.pathToReleaseConfigs }}
         target-repo: flxbl-io/${{ inputs.dashboard-repo }}
         gh_token: ${{ secrets.gh_token}}


      # Publish artifacts
      - uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{inputs.domain}}
          path: artifacts
          if-no-files-found: ignore


      # Publish logs
      - uses: actions/upload-artifact@v3
        with:
          name: logs
          path: .sfpowerscripts/logs
   
  deploy-to-org: 
    runs-on: ubuntu-latest
    container: ghcr.io/dxatscale/sfpowerscripts-rc:alpha
    needs: 
      - build
      - fetch-test-envs
    if: ${{ needs.fetch-test-envs.outputs.allEnvsAsJSON != '[]' && needs.fetch-test-envs.outputs.allEnvsAsJSON != '' }}
    strategy:
      fail-fast: false
      matrix:
        environment: ${{  fromJSON(needs.fetch-test-envs.outputs.allEnvsAsJSON) }}
    environment:
      name:  ${{ matrix.environment }}  
    steps:


      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        id: download_artifacts
        continue-on-error: true
        with:
            name: build-artifacts-${{inputs.domain}}
            path: artifacts 


      - name: Export Datadog Environment Variables
        if: ${{ inputs.metrics-provider == 'datadog' && steps.download_artifacts.outcome == 'success'}}
        run: |
          echo "SFPOWERSCRIPTS_DATADOG=true" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_HOST=${{ secrets.datadog-host }}" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_API_KEY=${{ secrets.datadog-api-key }}" >> $GITHUB_ENV


      - name: Lock enviroment 
        uses: ben-z/gh-action-mutex@v1.0-alpha-7
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
          repo-token: ${{ secrets.gh_token }}
          branch: ${{ matrix.environment }}-mutex

      - name:  'Authenticate Dev Hub'
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
          sfdx auth:sfdxurl:store -f authfile -a devhub

      - name: Authenticate to ${{ matrix.environment }}
        id: handle-auth
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        uses: flxbl-io/sfops-gh-actions/authToEnvironment@main
        with: 
          DEVHUB_SFDX_AUTH_URL: ${{ secrets.DEVHUB_SFDX_AUTH_URL }}
          SB_SFDX_AUTH_URL: ${{ secrets.SB_SFDX_AUTH_URL }}
          environment: ${{ matrix.environment }}
          org-name: ${{ matrix.environment }}
          environment-profile:  ${{ matrix.environment }}

      - name: Install additional plugins if any
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
            if [[ -n "${{ inputs.additional-plugins }}" ]]; then
                IFS=',' read -ra plugins <<< "${{ inputs.additional-plugins }}"
                for plugin in "${plugins[@]}"; do
                    echo "Installing $plugin"
                    echo 'y' | sfdx plugins:install $plugin
                done
            fi

      - name: 'Deploy to ${{ matrix.environment }}'
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          sfpowerscripts orchestrator:deploy -u ${{ matrix.environment }} -g "::group::,::endgroup::" 

      - name: 'Run package version reporter'
        uses:  flxbl-io//sfops-gh-actions/packageversionReporter@main
        with:
         alias: ${{ matrix.environment }}
         env-name: ${{ matrix.environment }}
         target-repo: flxbl-io/${{ inputs.dashboard-repo }}
         gh_token: ${{ secrets.gh_token }}
 
  
  publish:
    name: 'publish'
    runs-on: ubuntu-latest
    container: ghcr.io/dxatscale/sfpowerscripts-rc:alpha
    needs: 
      - deploy-to-org
    if: |
      always() && ( needs.deploy-to-org.result == 'success' || needs.deploy-to-org.result == 'skipped')
    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.gh_token}}


      - uses: actions/download-artifact@v3
        id: download_artifacts
        continue-on-error: true
        with:
            name: build-artifacts-${{inputs.domain}}
            path: artifacts 


      # Authenticate to npm
      - uses: actions/setup-node@v3
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
         registry-url: 'https://npm.pkg.github.com'


      - name: 'Fetch all ReleaseNames'
        id: getAllReleaseNames
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        uses: flxbl-io/sfops-gh-actions/fetchAllReleaseNames@main  
        with:
          pathToReleaseConfigs: ${{ inputs.pathToReleaseConfigs}}

         
      - name: Compute Release Name
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          if [[ $BRANCH_NAME == release* ]]; then
            RELEASE_NAME="hotfix-${{ steps.get-domain.outputs.domain }}-$(date +'%d-%m')-${{ github.run_id }}"
          else
            RELEASE_NAME="${{ inputs.releasename }}-$(date +'%d-%m')-${{ github.run_id }}"
          fi
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
          echo "allDomains={{steps.getAllReleaseNames.outputs.releaseNames}}" >> $GITHUB_ENV


      - name: Publish
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          sfpowerscripts orchestrator:publish -d artifacts --npm --scope @${{ github.repository_owner }}  --gittag --pushgittag
        env:
         NODE_AUTH_TOKEN: ${{ secrets.gh_token}}
         GH_TOKEN: ${{ secrets.gh_token}}
         


      - name: Generate release notes
        if: {{ always() && steps.download_artifacts.outcome == 'success' }}
        run: |
           sfpowerscripts releasedefinition:generate -b releasedefns  -c  HEAD  -d ${{inputs.domain}} -f  ${{inputs.releaseconfig}} -n ${{env.RELEASE_NAME}}
           sfpowerscripts changelog:generate -b releasedefns  -d artifacts -w "${{inputs.workitem-filter}}" -r "${{inputs.workitem-url}}" -n ${{env.RELEASE_NAME}} --directory ${{inputs.domain}}  
        env:
          NODE_AUTH_TOKEN: ${{ secrets.gh_token}}
          GH_TOKEN: ${{ secrets.gh_token}}

  
      - name: 'Report changelog'
        uses: flxbl-io/sfops-gh-actions/changelogReporter@main  
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
         source-branch: releasedefns
         pathToReleaseConfigs: ${{ inputs.pathToReleaseConfigs }}
         target-repo: flxbl-io/${{ inputs.dashboard-repo }}
         domain: ${{inputs.domain}}
         gh_token: ${{ secrets.gh_token}}
         source-repo-url: https://github.com/${{github.repository}}
         workitem-url: ${{inputs.workitem-url}}

      - name: 'Cherry pick the commit and create PR'
        uses: flxbl-io/sfops-gh-actions/cherrypickAndCreatePR@main
        continue-on-error: true
        if:  contains(github.ref,'release') || github.ref == 'refs/heads/release/**'
        with:
          git-user-email: buildbot@flxbl.io
          git-user-name: build-bot
          gh_token: ${{ secrets.GHA_TOKEN }}
          target-branch: 'main'


      - uses: mshick/add-pr-comment@v2
        name: Report Comment on originating PR
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
         allow-repeats : true
         repo-token : ${{ secrets.gh_token}}
         message: |
          This work item  is now published in the following release defn  ${{env.RELEASE_NAME}} .
          The link is available at https://flxbl-io.github.io/${{inputs.dashboard-repo}}/changelog/changelog-${{inputs.domain}}.html#${{env.RELEASE_NAME}}

      - name: Create Message Body as File
        id: message_template
        if: always()
        run: |
          if [ -f .sfpowerscripts/outputs/deployment-error.md.md ]; then
           cat .sfpowerscripts/outputs/deployment-error.md.md >> message.md
          fi

      - uses: mshick/add-pr-comment@v2
        name: Print Any Deployment errors
        continue-on-error: true
        with:
          allow-repeats: true
          repo-token: ${{ secrets.gh_token }}
          message-path: |
               message.md 


  comment_issue_on_error:
      runs-on: ubuntu-latest
      needs:  publish
      if: always() && ( needs.publish.result == 'failure' || needs.publish.result == 'cancelled' || needs.publish.result == 'skipped')
      steps:

      - uses: mshick/add-pr-comment@v2
        with:
         allow-repeats : true
         repo-token : ${{ secrets.gh_token}}
         message: |
            Apologies, it seems we ran into an issue, This would need your manual attention please check the job run
            at the link https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
     

