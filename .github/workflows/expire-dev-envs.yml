name: 'IssueOps - Expire Developer Envs'

on:
  workflow_call:
     inputs:
        sfopsbot-app-id: 
          description: The App id of the bot used for this workflow_call
          type: "string"        
     secrets:
      NPM_TOKEN:
        description: "GH TOKEN to publish to NPM"
      DEVHUB_SFDX_AUTH_URL:
        description: "Devhub Auth URL"
      SB_SFDX_AUTH_URL:
        description: "Sandbox Auth URL"
      DATADOG_API_KEY:
        description: "Datadog api key to report metrics"
      DATADOG_HOST:
        description: "Datadog host to report metrics"
      SFOPSBOT_APP_PRIVATE_KEY:
        description: "Private key of the bot app used"

jobs:
  close_so_create_issues:
    runs-on: ubuntu-latest
    steps:


    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ inputs.sfopsbot-app-id }}
        private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}

    - name: Close ScratchOrg Creation Requests if expired
      uses: actions/github-script@v6
      with:
        github-token: ${{ steps.app-token.outputs.token }}
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: "ops-scratchorg-request",
          });

          const now = new Date();
          for (const issue of issues.data) {
            const issueCreatedAt = new Date(issue.created_at);
            const daysOld = Math.ceil((now - issueCreatedAt) / (1000 * 60 * 60 * 24));

            // Here we parse the issue body to get the DAYS_TO_KEEP value
            const lines = issue.body.split("\n");
            const questionIndex = lines.findIndex(line => line.includes("How long should the scratch org be kept?"));
            if (questionIndex !== -1 && lines.length > questionIndex + 2) {
            let DAYS_TO_KEEP = 10;
              try
              {
                DAYS_TO_KEEP = parseInt(lines[questionIndex + 2].trim());
                if(DAYS_TO_KEEP < 1)
                  DAYS_TO_KEEP = 1;
              }
              catch(error)
              {
                DAYS_TO_KEEP=10;
              }
              console.log(`Days to keep: ${DAYS_TO_KEEP}... daysOld: ${daysOld}... issue #${issue.number}`);
              if (daysOld > DAYS_TO_KEEP) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                console.log(`Closed issue #${issue.number}`);
              }
            }
          }

  close_sbx-create_issues:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ inputs.sfopsbot-app-id }}
        private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}



    - name: Close Sandbox Creation Requests if expired
      uses: actions/github-script@v6
      with:
        github-token: ${{ steps.app-token.outputs.token }}
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: "ops-sandbox-request",
          });

          const now = new Date();
          for (const issue of issues.data) {
            const issueCreatedAt = new Date(issue.created_at);
            const daysOld = Math.ceil((now - issueCreatedAt) / (1000 * 60 * 60 * 24));

            // Here we parse the issue body to get the DAYS_TO_KEEP value
            const lines = issue.body.split("\n");
            const questionIndex = lines.findIndex(line => line.includes("How long should the sandbox be kept?"));
            if (questionIndex !== -1 && lines.length > questionIndex + 2) {
            let DAYS_TO_KEEP = 10;
              try
              {
                DAYS_TO_KEEP = parseInt(lines[questionIndex + 2].trim());
                if(DAYS_TO_KEEP < 1)
                  DAYS_TO_KEEP = 1;
              }
              catch(error)
              {
                DAYS_TO_KEEP=10;
              }
              console.log(`Days to keep: ${DAYS_TO_KEEP}... daysOld: ${daysOld}... issue #${issue.number}`);
              if (daysOld > DAYS_TO_KEEP) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                console.log(`Closed issue #${issue.number}`);
              }
            }
          }


    - name: Redo close Sandbox Creation Requests if it failed previously
      uses: actions/github-script@v6
      with:
        github-token: ${{ steps.app-token.outputs.token }}
        script: |
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: "ops-sandbox-request-delete-failed",
              });
    
              for (const issue of issues.data) {
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      state: 'closed'
                    });
                    console.log(`Closed issue #${issue.number}`);
                }
            
             
