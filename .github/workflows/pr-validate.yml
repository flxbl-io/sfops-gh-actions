name: "Validate Pull Request"
on:
  workflow_call:
    inputs:
      sfopsbot-app-id: 
         description: The App id of the bot used for this workflow_call
         type: "string"
      metrics-provider:
        description: "The metrics provider to be used"
        type: "string"
      devhub-username:
        description: "The username of the devhub to be used to fetch ci sandboxes"
        type: "string"
      additional-plugins:
         description: Additional plugins used while deploying packages
         type: "string"
    secrets:
      NPM_TOKEN:
        description: "GH TOKEN to publish to NPM"
      DEVHUB_SFDX_AUTH_URL:
        description: "Devhub Auth URL"
      SB_SFDX_AUTH_URL:
        description: "Sandbox Auth URL"
      DATADOG_API_KEY:
        description: "Datadog api key to report metrics"
      DATADOG_HOST:
        description: "Datadog host to report metrics"
      SFOPSBOT_APP_PRIVATE_KEY:
        description: "Private key of the bot app used"


jobs:

 instructions:
    name: 'Display instructions on every PR'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}

      - uses: mshick/add-pr-comment@v2
        if: ${{ vars.SFOPS_BRANCH_DEPLOY == 'true' }} && contains(github.base_ref,'release-') == false
        with:
          allow-repeats: false
          message-id: intro
          refresh-message-position: false
          repo-token: ${{ steps.app-token.outputs.token }}
          message: |
              Hello @${{ github.event.pull_request.user.login }}, :wave:

              If you are a new contributor to this repository, read on!

              This is a sfops powered Salesforce repository.  Your PR will now be validated against a scratch org or sandbox depending on the configuration

              You can type in the following as a comment for further actions

              üß™ ```sfops test ```     : Deploy this PR to Test Environments, if your review and validation is successful
              üí™ ```sfops forcetest``` : Deploy this PR to Test Environments without considering any impacts
              üîì ```sfops unlock```    : If this issue is previously deployed to test environment and you need to unlock to push another workitem
              ‚ôªÔ∏è  ```sfops renew```     : If you believe your review environment is corrupted, add this comment before retrying (only for sandboxes)
              üïô ```sfops extend```    : Extend the review environment upto 48 hours (only for sandboxes)

      - uses: mshick/add-pr-comment@v2
        if: ${{ vars.SFOPS_BRANCH_DEPLOY == '' }} || contains(github.base_ref,'release-') == true
        with:
          allow-repeats: false
          message-id: intro
          refresh-message-position: false
          repo-token: ${{ steps.app-token.outputs.token }}
          message: |
              Hello @${{ github.event.pull_request.user.login }}, :wave:

              If you are a new contributor to this repository, read on!

              This is a sfops powered Salesforce repository.  Your PR will now be validated against a scratch org or sandbox depending on the configuration

              You can type in the following as a comment for further actions
              
              ‚ôªÔ∏è  ```sfops renew``` : If you believe your review environment is corrupted, add this comment before retrying (only for sandboxes)
              üïô ```sfops extend```: Extend the review environment upto 48 hours (only for sandboxes)


 statuscheck:
    name: "Deployments to Test Environments"
    runs-on: ubuntu-latest
    steps:

      - uses: flxbl-io/sfops-gh-actions/checkActions@main
        name: 'Initiate Check'
        id: initiate-check
        if: ${{ vars.SFOPS_BRANCH_DEPLOY == 'true' }}
        with:
          token: ${{ secrets.NPM_TOKEN }}
          name: 'Deployments to Test Environments'
          status: 'queued'
          output: |
            {"summary":"Check for deployment to test environments","title":"Deployments to Test Environments"}


 static:
    name: 'static-analysis-of-Apex-classes-using-PMD'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}

      - uses: pmd/pmd-github-action@v1
        with:
          rulesets: 'pmd-rulesets/pmd-ruleset.xml'
          analyzeModifiedFilesOnly: true
          token: ${{ steps.app-token.outputs.token }}
 
 analyze:
  name: 'Analyze Impacted Domains'
  runs-on: ubuntu-latest
  container: ghcr.io/flxbl-io/sfops-lite:latest
  outputs:
    matrix: ${{ steps.set-matrix.outputs.matrix }}
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0


    - name: 'Figure Impacted Release Defns'
      uses: flxbl-io/sfops-gh-actions/impactedReleaseDefnDetector@main
      with:
       pathToReleaseDefns: 'config'
       from-commit: ${{ github.event.pull_request.base.sha }}
       to-commit: ${{ github.event.pull_request.head.sha }}   

  
    - uses: actions/create-github-app-token@v1
      id: app-token
      name: Fetch App Token
      with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}

  
    - uses: flxbl-io/sfops-gh-actions/branchDeploymentReporter@main
      name: Report Branch Status
      id: report
      with:
        status: 'validation'
        branch: ${{ github.event.pull_request.head.ref }}   
        dashboard-repo:  ${{ vars.SFOPS_DASHBOARD_REPO }}
        gh_token: ${{steps.app-token.outputs.token}}
        issue-number: ${{ github.event.pull_request.number }}
  
       
    - name: Set matrix data
      id: set-matrix
      run: |
         echo "matrix=$(jq -c . < ./impacted-release-configs.json)" >> $GITHUB_OUTPUT

 validate:
    name: 'Validate Changed Packages'
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-io/sfops:latest
    if: ${{ needs.analyze.outputs.matrix != '[]' && needs.analyze.outputs.matrix != '' }}
    needs: analyze
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.analyze.outputs.matrix) }}
      max-parallel: 1
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - uses: actions/create-github-app-token@v1
        id: app-token
        name: Fetch sfops App Token
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}
         skip-token-revoke: true

      - name: 'Authenticate DevHub'
        run: |
            echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
            sfdx auth:sfdxurl:store -f authfile -a devhub

      - name: 'Fetch Type of Pool'
        uses:  flxbl-io/sfops-gh-actions/getTypeOfPool@main
        id: getTypeOfPool
        with:
          pool: ${{ matrix.pool }}
          directory: config

      - name: Export Datadog Environment Variables
        if: ${{ inputs.metrics-provider == 'datadog'}}
        run: |
          echo "SFPOWERSCRIPTS_DATADOG=true" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_HOST=${{ secrets.DATADOG_HOST }}" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}" >> $GITHUB_ENV
  
      # Fetch a sandbox
      - name: 'Fetch CI Sandboxes'
        if: contains(github.base_ref,'release-') == false  && steps.getTypeOfPool.outputs.type == 'sandbox'
        uses: flxbl-io/sfops-gh-actions/fetchCISandbox@main
        id: fetchCISandbox
        with:
          pool: ${{ matrix.pool }}
          releaseName: ${{ matrix.releaseName}}
          branch: ${{ github.base_ref }}
          gh_token: ${{ steps.app-token.outputs.token }}
          issue-number: ${{ github.event.number }}
          dashboard-repo:  ${{ vars.SFOPS_DASHBOARD_REPO }}



      - name: 'Fetch CI Sandboxes for hotfixes'
        if:  contains(github.base_ref,'release-') || github.base_ref == 'refs/heads/release/**'
        uses:  flxbl-io/sfops-gh-actions/fetchCISandbox@main
        id: fetchCISandboxHotfix
        with:
          pool: HOTFIX
          branch: release
          releaseName: ${{ matrix.releaseName}}
          gh_token: ${{ steps.app-token.outputs.token }}
          issue-number: ${{ github.event.number }}
          dashboard-repo:  ${{ vars.SFOPS_DASHBOARD_REPO }}



      - name: 'Authenticate ci'
        if: steps.getTypeOfPool.outputs.type == 'sandbox' && contains(github.base_ref,'release-') == false
        run: |
           sfdx org resume sandbox -n ${{ steps.fetchCISandbox.outputs.sbxname }} -o devhub
           sfdx alias set ci=${{ inputs.devhub-username }}.${{ steps.fetchCISandbox.outputs.sbxname }}

      - name: 'Authenticate ci for hotfix'
        if: contains(github.base_ref,'release-') || github.base_ref == 'refs/heads/release/**'
        run: |
           sf org resume sandbox -n ${{ steps.fetchCISandboxHotfix.outputs.sbxname }} -o devhub
           sf alias set ci=${{ inputs.devhub-username }}.${{ steps.fetchCISandboxHotfix.outputs.sbxname }}


      - name: Install additional plugins if any
        run: |
          if [[ -n "${{ inputs.additional-plugins }}" ]]; then
              IFS=',' read -ra plugins <<< "${{ inputs.additional-plugins }}"
              for plugin in "${plugins[@]}"; do
                  echo "Installing $plugin"
                  echo 'y' | sfdx plugins:install $plugin
              done
          fi


      # Validate source and trigger test
      - name: 'Validate Against ci sandbox'
        if: steps.getTypeOfPool.outputs.type == 'sandbox'
        id: validateWithSandbox
        run: |
          sfp orchestrator:validateAgainstOrg -u ci -v devhub --diffcheck --disableartifactupdate  --disablesourcepkgoverride  --installdeps   --mode=thorough-release-config --releaseconfig=${{matrix.filePath}} --orginfo


      # Validate source and trigger test
      - name: 'Validate Against ci scratch org'
        if: steps.getTypeOfPool.outputs.type == 'scratchorg'
        id: validateWithScratchOrg
        run: |
          sfp orchestrator:validate -p ${{steps.getTypeOfPool.outputs.pool }} -v devhub   --disablesourcepkgoverride  --installdeps   --mode=thorough-release-config --releaseconfig=${{matrix.filePath}} --orginfo


      #App Token has an expriy of an hour, do a refresh again
      - uses: actions/create-github-app-token@v1
        id: app-token-refreshed
        name: Refresh sfops App Token
        if: always()
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}

      - name: Create Message Body as File
        id: message_template
        if: ${{ always() }}
        run: |
          has_errors=false

          printf "Hello  @${{ github.event.pull_request.user.login }}, " > message.md
          printf "\nPlease find some information if available regarding your [validation run](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})\n" >> message.md
          
          printf "\n##  :crystal_ball:  Validation Summary" >> message.md

          if [ -f  .sfpowerscripts/outputs/org-info.md ]; then
            printf "\n### :o: Org Info" >> message.md
            cat .sfpowerscripts/outputs/org-info.md >> message.md
          else
            printf "\n### :warning: Unable to Fetch Org Info" >> message.md
            printf "\nWe are unable to fetch an org or process validation, You need to double check the run" >> message.md
            exit 0
          fi

          if [ -f .sfpowerscripts/outputs/deployment-breakdown.md ]; then
            printf "\n### :eyes: Packages Validated\n" >> message.md
            cat .sfpowerscripts/outputs/deployment-breakdown.md >> message.md
          fi
            
          if [ -f .sfpowerscripts/outputs/build-error-info.md ]; then
            printf "\n### :bangbang: Build Errors" >> message.md
            printf "\nLooks like we have ran into some issues during the build of your packages \n" >> message.md
            cat .sfpowerscripts/outputs/build-error-info.md >> message.md
            has_errors=true
          fi    

          if [ -f .sfpowerscripts/outputs/deployment-error.md ]; then
            cat .sfpowerscripts/outputs/deployment-error.md >> message.md
            has_errors=true
          fi


          if [ -f .sfpowerscripts/outputs/validation-error.md ]; then
            cat .sfpowerscripts/outputs/validation-error.md >> message.md
            has_errors=true
          fi
          
          printf "\n### :checkered_flag: Errors">> message.md

          if $has_errors; then
            printf "\n## :x: Validation Failed, Check for Errors" >> message.md
          else
            printf "\n## :white_check_mark: Validation Successful, No Errors Found" >> message.md
          fi

          
          

      - uses: mshick/add-pr-comment@v2
        name: Print Validation Breakdown
        if: always()
        with:
          allow-repeats: false
          repo-token: ${{ steps.app-token-refreshed.outputs.token }}
          message-id: ${{matrix.filePath}}
          refresh-message-position: true
          message-path: |
             message.md 
            
      # Publish logs
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: logs
          path: .sfpowerscripts/logs
  
        # Publish testresults
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: testresults
          path: .testresults


      # Release a sandbox
      - name: 'Release CI Sandboxes'
        uses:  flxbl-io/sfops-gh-actions/releaseCISandbox@main
        if: always() && steps.getTypeOfPool.outputs.type == 'sandbox'
        with:
          pool: ${{ matrix.pool }}
          sbxname: ${{ steps.fetchCISandbox.outputs.sbxname }}
          gh_token: ${{ steps.app-token-refreshed.outputs.token }}
          branch: ${{ github.base_ref }}

 results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name:  Status Check - Validate Domain
    needs: [validate]
    steps:
    

     -  uses: actions/checkout@v3
  
     - uses: actions/create-github-app-token@v1
       id: app-token
       name: Fetch App Token
       with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}

     - uses: flxbl-io/sfops-gh-actions/branchDeploymentReporter@main
       name: Report Branch Status
       id: report
       if: ${{  contains(needs.*.result, 'skipped')  ||  contains(needs.*.result, 'success') }}
       with:
        status: 'validated'
        branch: ${{ github.event.pull_request.head.ref }}   
        dashboard-repo:  ${{ vars.SFOPS_DASHBOARD_REPO }}
        gh_token: ${{steps.app-token.outputs.token}}
        issue-number: ${{ github.event.pull_request.number }}

     - run: exit 1
       if: ${{  contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}

     - run: exit 0
       if: ${{  contains(needs.*.result, 'skipped') }}