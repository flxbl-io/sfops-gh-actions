# Reusable job not to be used directly

name: 'Trigger Release to an org'

on:
  workflow_call:
    inputs:
      environment:
          description: 'Name of the environment'
          type: 'string'
      sbxname:
          description: 'The name of the org to be released'
          type: 'string'
      domain: 
         description: 'Domain  that need to be released'
         required: true
         type: 'string'
      branchname:  
         description: 'Name of the branch where the release defn is stored in the repo'
         required: true
         type: 'string'
      releaseDefn: 
         description: 'The release definition to use'
         required: true
         type: 'string'
      overrideSkipIfAlreadyInstalled:
         description: 'Override skipIfAlreadyInstalled flag in the release defintion'
         type: 'string'
      excludePackages:
          description: 'Exclude packages from the release'
          type: 'string'
      overridePackageVersions:
          description: 'Override package version in the release'
          type: 'string'
      issue-number:
         description: 'If this action is triggered from an issue, the issue number'
         type: 'string'
      issue-author:
          description: 'The initiator of the issue'
          type: 'string'
      workitem-url:
         description: 'Workitem URL to be used in the changelog'
         type: 'string'      
      issue-notifier:
            description: 'Who all need to be need to be notified'
            type: 'string'
      metrics-provider:
            description: 'The metrics provider to be used'
            type: 'string'
    secrets: 
        DEVHUB_SFDX_AUTH_URL:
            description: 'Devhub Auth URL'
        SB_SFDX_AUTH_URL:
            description: 'Sandbox Auth URL'
        gh-token:
            description: 'GH Token to commit to the target repo'
            

jobs:
  pre-release-to-org:
    runs-on: ubuntu-latest
    container: ghcr.io/dxatscale/sfpowerscripts-rc:alpha
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
            node-version: "18" 
            registry-url: 'https://npm.pkg.github.com'

      - name: Fetch Environment Variables
        id: fetch-env-vars
        uses: raven-actions/environment-variables@v1
        with:
          github-token: ${{ secrets.gh-token }}
          environment:  ${{ inputs.environment }}

      - name: Authenticate to ${{ inputs.environment }}
        id: handle-auth
        uses: flxbl-io/sfops-gh-actions/authToEnvironment@main
        with: 
          DEVHUB_SFDX_AUTH_URL: ${{ secrets.DEVHUB_SFDX_AUTH_URL }}
          SB_SFDX_AUTH_URL: ${{ steps.fetch-env-vars.outputs.SB_SFDX_AUTH_URL }}
          environment: ${{ inputs.environment }}
          org-name: ${{ inputs.sbxname }}
          environment-profile:  ${{ inputs.environment }}

      - name: Fetch Release Defn
        id: fetch-release-defn
        run: |
          # Get the latest release defn from releasedefns branch
          pathToReleaseDef="${{ inputs.releaseDefn }}"
          extension="${pathToReleaseDef##*.}"
          if [[ "$extension" == "yaml" || "$extension" == "yml" ]]; then
              pathWithoutExtension="${pathToReleaseDef%.*}"
          else
              pathWithoutExtension="$pathToReleaseDef"
          fi
          git config --global --add safe.directory  $GITHUB_WORKSPACE
          git show origin/${{inputs.branchname}}:${{ inputs.domain }}/$pathWithoutExtension.yml > $pathToReleaseDef.yml

          echo "releaseDefn=$pathToReleaseDef.yml" >> "$GITHUB_OUTPUT"


      - name: 'Exclude Packages if  any'
        uses: flxbl-io/sfops-gh-actions/excludePackagesInReleaseDefns@main
        with:
          changelog: ${{steps.fetch-release-defn.outputs.releaseDefn}}
          excludePackages: ${{ inputs.excludePackages }}

      - name: 'Run Override package version if any'
        uses: flxbl-io/sfops-gh-actions/overridePackageVersionInReleaseDefns@main
        with:
          changelog:  ${{steps.fetch-release-defn.outputs.releaseDefn}}
          overridePackageVersions: ${{ inputs.overridePackageVersions }}


      # Release to environment
      - name: Do a Dry Run
        id: release
        run: |
            if [ "${{ inputs.overrideSkipIfAlreadyInstalled }}" == "yes" ]; then
              sed -i 's/skipIfAlreadyInstalled: true/skipIfAlreadyInstalled: false/'  ${{steps.fetch-release-defn.releaseDefn}}
            fi

             sfpowerscripts orchestrator:release --dryrun -u ${{steps.handle-auth.outputs.alias}} -d ${{ inputs.domain }} -p  ${{steps.fetch-release-defn.outputs.releaseDefn}} --npm --scope ${{ github.repository_owner }} --generatechangelog --branchname ${{inputs.branchname}}  -v prod -g "::group::,::endgroup::"
        env:
          NODE_AUTH_TOKEN:  ${{ secrets.gh-token}}



      - uses: flxbl-io/sfops-gh-actions/workItemReporter@main
        name: Print Incoming Work Items
        continue-on-error: true
        with:
          source-branch: ${{inputs.branchname}}
          domain: ${{inputs.domain}}
          workitem-url: ${{inputs.workitem-url}}
          environment: ${{steps.handle-auth.outputs.alias}}

      - name: Create Message Body as File
        id: message_template
        run: |
          echo "Hello @${{ inputs.issue-author }} , " > message.md
          echo " " >> message.md
          echo "Please find the contents of release defintion after applying any transformations to ${{steps.handle-auth.outputs.alias}}" >> message.md
          echo " " >> message.md
          if [ -f .sfpowerscripts/outputs/deployment-breakdown.md ]; then
            cat .sfpowerscripts/outputs/deployment-breakdown.md >> message.md
          else
            echo "Unable to figure out deployment breakdown, contact support! " >> message.md
          fi
          if [ -f changelog-${{inputs.domain}}.md ]; then
            cat changelog-${{inputs.domain}}.md >> message.md
          else
            echo "Unable to figure out work items in this release, if you think this is incorrect, contact support! " >> message.md
          fi

          cat message.md

      

      - uses: mshick/add-pr-comment@v2
        name: Print contents of  release defn
        with:
          issue: ${{inputs.issue-number}}
          allow-repeats: true
          repo-token: ${{ secrets.gh-token}}
          message-path: |
                message.md
            
     