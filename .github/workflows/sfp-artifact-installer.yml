# Reusable job not to be used directly

name: 'Install a sfpowerscripts artifact to target org'

on:
  workflow_call:
    inputs:
      environment:
        description: 'Name of the environment'
        required: true
        type: 'string'
      packages:
        description: 'package and versions seperated by coma if multiple'
        required: true
        type: 'string' 
      forceInstall:
        description: 'Force Install the package?'
        type: 'string'
      target-repo:
          description: 'Target repo to submit package version report as HTML'
          type: 'string'
    secrets: 
      DEVHUB_SFDX_AUTH_URL:
        description: 'Devhub Auth URL'
      SB_SFDX_AUTH_URL:
        description: 'Sandbox Auth URL'
      gh-token:
        description: 'GH Token for fetching artifact'
      
            

jobs:
  install-sfp-artifact:
    runs-on: ubuntu-latest
    container: ghcr.io/dxatscale/sfpowerscripts-rc:alpha
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
            node-version: "18" 
            registry-url: 'https://npm.pkg.github.com'
            token: ${{ secrets.gh-token }}

      - name: Authenticate to ${{ inputs.environment }}
        id: handle-auth
        uses: flxbl-io/sfops-gh-actions/authToEnvironment@main
        with: 
          DEVHUB_SFDX_AUTH_URL: ${{ secrets.DEVHUB_SFDX_AUTH_URL }}
          SB_SFDX_AUTH_URL: ${{ secrets.SB_SFDX_AUTH_URL }}
          environment: ${{ inputs.environment }}
          org-name: ${{ vars.SBXNAME }}
          environment-profile:  ${{ inputs.environment }}


      - name: Create a temporary releasedefn for fetching artifact
        id: create-release-defn
        uses: flxbl-io/sfops-gh-actions/releasedefnCreator@main
        with: 
          releaseName: 'install-sfp-artifact'
          packageVersionMap: ${{ inputs.packages }}

      - name: Fetch the artifact from Github Packages
        run: |
            sfp  artifacts:fetch -p release_definition.yaml -d artifacts --npm --scope ${{ github.repository_owner }} 
            find artifacts -type d -or -type f -exec echo {} \;
        env:
          NODE_AUTH_TOKEN:  ${{ secrets.gh-token}}

      - name: Install the artifact to respective org
        run: |
          packageVersionMap=${{ inputs.packages }}
          forceInstall=${{ inputs.forceInstall }}
          # Parse input to install  artifacts
          IFS=',' read -ra packages <<< "$packageVersionMap"
          for pkg in "${packages[@]}"; do
              pkg_name=$(echo $pkg | cut -d':' -f1)
              if [ "$forceInstall" == "true" ]; then
                 sfp package:install -u ${{ steps.handle-auth.outputs.alias }} -n $pkg_name --artifactdir artifacts/$(date +'%d-%m-%Y')
              else
                 sfp package:install -u ${{ steps.handle-auth.outputs.alias }} -n $pkg_name --skipifalreadyinstalled --artifactdir artifacts/$(date +'%d-%m-%Y')
              fi
           done
          

  #Only report if the environment is really valid, not just a CI or Dev Sandbox     
      - name: 'Run package version reporter'
        uses: flxbl-io/sfops-gh-actions/packageversionReporter@main
        if: ${{ vars.SBXNAME!='' || secrets.SB_SFDX_AUTH_URL!='' }}
        with:
         alias: ${{ inputs.environment }}
         env-name: ${{ inputs.environment }}
         target-repo: ${{inputs.target-repo}}
         gh_token: ${{ secrets.gh-token }}

  