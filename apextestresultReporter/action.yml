#always assume it needs sfpowerscripts docker image as the run time

name: 'Report execution of run all local tests of an or go to a repo'
description: 'Report package version of an org to a folder in repo and create an html report'
inputs:
  alias:  # id of input
    description: 'alias of the org'
    required: true
  target-repo:  # id of input
    description: 'name of the repo to report to, will create a folder apexTestResults in the target repo'
    required: true
  gh_token:  # id of input
    description: 'github token to use for commiting to repo'
    required: true

runs:
  using: "composite"
  steps:
    - run: |
          # Install gh cli on ubuntu
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y                
      shell: bash
    
    - run: |
    
            # add a var for tracking metrics
            start=$(date +%s)

            # ignore failure of this command
            set +e
            sf apex  run  test -o  ${{ inputs.alias }} -l RunAllTestsInOrg -w 300 -y -d testresults -r json 
            set -e

            # calculate elapsed time
            end=$(date +%s)
            elapsed=$(( end - start ))

            # Find the file that ends with -junit.xml in the testresults directory
            FILE=$(find ./testresults -type f -name '*-junit.xml')

            if [ -z "$FILE" ]
            then
            echo "No file found ending with -junit.xml in testresults directory"
            exit 1
            fi

            sfp metrics:report -m "testrun.elapsedtime" -t timer -v $elapsed -g {\"env\":\"${{inputs.alias}}\"}

            # Run the Node.js script with the file path as an argument
            node $GITHUB_ACTION_PATH/dist/index.js "$FILE"  ${{inputs.alias}}

            find ./testresults -type f ! -name '*.html' -delete
            
      shell: bash

    - name: 'Fetch all Envs'
      id: getAllEnvs
      uses: flxbl-io/sfops-gh-actions/fetchAllEnvs@main  
      with:
          gh_token: ${{ inputs.gh-token}}

    - run: |
          # Compute all envs
          git config --global --add safe.directory $GITHUB_WORKSPACE
          
          export GH_TOKEN=${{inputs.gh_token}}
             
          $GITHUB_ACTION_PATH/git-repo-commiter.sh ${{inputs.target-repo}}  ${{steps.getAllEnvs.outputs.envs}}  testresults apextestResults 'updated test results of ${{inputs.alias}}'
      shell: bash